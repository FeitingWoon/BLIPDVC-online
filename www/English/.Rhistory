ageThetaMeans <- aggregate(FullTheta ~ Age, data = thetasAndAge, mean)
View(thetasAndAge)
thetasAndAge$initialTheta <- ageThetaMeans[ageThetaMeans$Age == thetasAndAge$Age, "FullTheta"]
initialThetas <- laply(thetasAndAge$Age, function(x){
print(x)
})
initialThetas <- laply(thetasAndAge$Age, function(x){
print(ageThetaMeans[ageThetaMeans$Age == x, "FullTheta"])
})
initialThetas <- initialThetas <- laply(thetasAndAge$Age, function(x){
ageThetaMeans[ageThetaMeans$Age == x, "FullTheta"]
})
initialThetas
design <- list(max_items = 100, thetas.start = initialThetas)
mirtCAT_results <- mirtCAT(mo = mirtObject, method = 'ML', criteria = "MI", local_pattern = responses, cl = cl, design = design)
beep(sound=8)
ullThetas <- read.csv("fullThetas.csv", encoding="UTF-8")
#scores <- rowSums(responses)
#
thetas <- laply(mirtCAT_results, function(x) x$thetas)
meanItemsNr <- mean(laply(mirtCAT_results, function(x) length(x$items_answered)))
(r <- cor(thetas, fullThetas))
#
#
# #Get a plot of estimated theta vs. full theta
results <- data.frame(EstTheta = thetas, FullTheta = fullThetas)
plot(results)
library("ggpubr")
ggscatter(results, y = "FullTheta", x = "EstTheta",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Estimated Theta", ylab = "True Theta")
design <- list(max_items = 50, thetas.start = initialThetas)
mirtCAT_results <- mirtCAT(mo = mirtObject, method = 'ML', criteria = "MI", local_pattern = responses, cl = cl, design = design)
beep(sound=8)
meanItemsNr <- mean(laply(mirtCAT_results, function(x) length(x$items_answered)))
(r <- cor(thetas, fullThetas))
#
results <- data.frame(EstTheta = thetas, FullTheta = fullThetas)
plot(results)
library("ggpubr")
ggscatter(results, y = "FullTheta", x = "EstTheta",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Estimated Theta", ylab = "True Theta")
shapiro.test(results$EstTheta)
shapiro.test(results$FullTheta)
ggqqplot(results$FullTheta, ylab = "True Theta")
ggqqplot(results$EstTheta, ylab = "Estimated Theta Theta")
library("ggpubr")
ggscatter(results, y = "FullTheta", x = "EstTheta",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Estimated Theta", ylab = "True Theta")
thetas <- laply(mirtCAT_results, function(x) x$thetas)
meanItemsNr <- mean(laply(mirtCAT_results, function(x) length(x$items_answered)))
(r <- cor(thetas, fullThetas))
fullThetas <- read.csv("fullThetas.csv", encoding="UTF-8")
#scores <- rowSums(responses)
#
thetas <- laply(mirtCAT_results, function(x) x$thetas)
meanItemsNr <- mean(laply(mirtCAT_results, function(x) length(x$items_answered)))
(r <- cor(thetas, fullThetas))
#
#
# #Get a plot of estimated theta vs. full theta
results <- data.frame(EstTheta = thetas, FullTheta = fullThetas)
plot(results)
library("ggpubr")
ggscatter(results, y = "FullTheta", x = "EstTheta",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Estimated Theta", ylab = "True Theta")
fullThetas <- read.csv("fullThetas.csv", encoding="UTF-8")
hist(fullThetas)
View(fullThetas)
hist(fullThetas$FullTheta)
hist(fullThetas$FullTheta, xlab = "Full theta value")
hist(fullThetas$FullTheta, xlab = "Theta value", main = "Histogram of thetas")
shiny::runApp('D:/Studia/MGR/StarWords/Statyczny CDI')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
note <- strsplit(pageTxt[pageTxt$text_type == "note", "text"], "%")[[1]]
note[1]
note[0]
note[2]
shiny::runApp()
note,bb <- strsplit(pageTxt[pageTxt$text_type == "note", "text"], "%")[[1]]
note, bb <- strsplit(pageTxt[pageTxt$text_type == "note", "text"], "%")[[1]]
note <- strsplit(pageTxt[pageTxt$text_type == "note", "text"], "%")[[1]]
note[1]
note[2]
pageItems[pageItems$item_id == note[1], 'definition']
pageItems[pageItems$item_id == "item_258", 'definition']
tx <- paste0(pageItems[pageItems$item_id == "item_258", 'definition'], "*")
tx
strtrim(tx)
str_trim(tx)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
pageTxt[pageTxt$text_type == "note", "text"]
pageTxt[pageTxt$text_type == "note", "text"][1]
note
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
notesList
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
pageInputType
pageSettings
typeSettings
currType
pageSettings
pageTyoe
pageType
currCat
categoriesNum
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
pageAnswer
selected
selected
choiceNames
runApp()
shiny::runApp()
shiny::runApp()
x=as.name("items")
x
x[1]
x = as.symbol("items")
x
items
items[1]
x = as.name("items[1]")
x
as.symbol(x)
as.name(x)
assign('itemsWG',items[1])
itemsWG
assign(items, 'itemsWG')
assign(bobo, 'itemsWG')
assign('items', 'itemsBobo')
items
assign('items', 'itemsWG')
items
assign('items', itemsWG)
as.symbol('itemsWG')
assign('x', as.symbol('itemsWG'))
x
x[1]
assign('x', as.name('itemsWG'))
x
get(x)
get('x')
get('itemsWG')
get('x')
x[1]
do.call("<-", list(x, 'itemsWG'))
x
do.call("<-", list(x, itemsWG))
eval(as.symbol('items'))
as.symbol('items')
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
items
assign(items, eval(as.symbol(paste0("items", form))))
items <- 1
assign(items, eval(as.symbol(paste0("items", form))))
shiny::runApp()
assign('items', assign(items, eval(as.symbol(paste0("items", form)))))
shiny::runApp()
items
items
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('D:/Studia/MGR/StarWords/Statyczny CDI')
shiny::runApp()
shiny::runApp()
shiny::runApp()
pageInputType
txt
txt
koko <<- txt
koko
pageSettings
typeSettings
pageType
currCat
categoriesNum
items
typeItems
items
currType
items$type
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
currCat
substr(currCat, 10, nchar(currCat))
as.numeric(substr(currCat, 10, nchar(currCat)))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
currCat
currType
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
currCat
currType
as.numeric(substr(currType, 10, nchar(currCat)))
shiny::runApp()
shiny::runApp()
shiny::runApp('D:/Studia/MGR/StarWords/Statyczny CDI')
shiny::runApp()
shiny::runApp('D:/Studia/MGR/StarWords/Statyczny CDI')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
progress
progress[progress$type == type, "done"]
progress[progress$type == type, "current"]
types
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
progress
types
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("shinyBS")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("httr")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(answers)
answers[answers$answers_type == "manyCheckboxGroups"]
answers[answers$answers_type == "manyCheckboxGroups",]
answers[answers$answer_type == "manyCheckboxGroups",]
answers[answers$answer_type == "manyCheckboxGroups", "answer"]
answersVectors = answers[answers$answer_type == "manyCheckboxGroups", "answer"]
answersVectors
strsplit(answersVectors[1], ",")[[1]]
splitted = strsplit(answersVectors[1], ",")[[1]]
splitted
as.numeric(splitted)
is.na(splitted)
is.na(as.numeric(splitted))
numbers = as.numeric(splitted)
numbers
apply(numbers, 2, anyNa)
apply(numbers, 2, anyNA)
numbers
apply(as.matrix(numbers), 2, anyNA)
numbers
replace(numbers, is.na(numbers), 2)
a <- table(numbers)
numbers[names(numbers) == 1]
numbers
a
a[names[a] -- 1]
c(answersVectors)
c(splitted)
typeof(answersVectors)
paste0(answersVectors, collapse = ",")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
answers <- read.csv("answers/Polish-WS-test.csv")
answers
answersStrings <- answers[answers$answer_type == "oneCheckboxGroup", "answer"]
answersStrings
len(answersStrings)
length(answersStrings)
nchar(answersStrings)
length(answersStrings[1])
answersStrings
as.vector(answersStrings)
as.numeric(answersStrings)
typeof(answersStrings)
as.string(answersStrings)
as.character(answersString)
as.character(answersStrings)
paste0(as.character(answersStrings), collapse = ", ")
strsplit(as.character(answersStrings), ",")[[1]]
strsplit(as.character(answersStrings), " ")[[1]]
strsplit(as.character(answersStrings)[1], " ")[[1]]
answersStrings
answersStrings <- as.character(answersStrings)
answersStrings
paste0(answersStrings, collapse = " ")
na.omit(answersStrings)
responses <- answers[answers$answer_type == "oneCheckboxGroup", "answer"]
responses
na.omit(responses)
responses <- na.omit(responses)
responses
responses[1]
responses[2]
responses[3]
responses[4]
len(responses)
length(responses)
typeof(responses)
as.character(responses)
paste0(as.character(responses, collapse = " "))
len(as.character(responses))
length(as.character(responses))
paste0(as.character(responses), collapse = " ")
length(paste0(as.character(responses), collapse = " "))
string <- paste0(as.character(responses), collapse = " ")
string
as.numeric(string)
list(string)
length(list)
string
nchar(string)
strsplit(string, ",")[[1]]
strsplit(string, " ")[[1]]
length(strsplit(string, " ")[[1]])
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
answers <- read.csv("answers/'Polish-WG-test.csv", encoding = "UTF-8")
answers <- read.csv("answers/Polish-WG-test.csv", encoding = "UTF-8")
answersStrings <- answers[answers$answer_type == "manyCheckboxGroups", "answer"]
answersStrings
na.omit(answersStrings)
paste0(na.omit(answersStrings), collapse = ", ")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(wordbankr)
get_crossling_items() -> lemma
english_wg_items <- get_item_data("English (American)", "WS")
all_items <- get_item_data()
View(english_wg_items)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
